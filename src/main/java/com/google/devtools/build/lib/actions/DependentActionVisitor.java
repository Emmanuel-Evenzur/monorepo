// Copyright 2014 Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package com.google.devtools.build.lib.actions;

import java.util.Collection;

import javax.annotation.Nullable;

/**
 * An interface whose implementations define custom traversal behavior while
 * visiting each node of the DependentActionGraph.
 */
public interface DependentActionVisitor {
  /**
   * Called when a DependentAction is about to be recursively visited.
   * Recursion on this dependency will proceed only if the method returns true.
   *
   * @param outputArtifact output generated by the dependency.
   * @param dependency DependentAction about to be visited.
   * @param rootArtifact whether this was a top-level artifact requested to be built.
   * @param dependencyVisited true if the DependentAction previously existed.
   */
  boolean visitDependency(Action action, Artifact outputArtifact,
      @Nullable DependentAction dependency, boolean rootArtifact, boolean dependencyVisited);

  /**
   * Called on each artifact as we traverse the graph.
   *
   * <p>The artifact will be visited only if the function returns true. Its generating action can
   * be evaluated using {@link ActionGraph#getGeneratingAction(Artifact)}.
   *
   * @param artifact the artifact under consideration.
   */
  boolean visitArtifact(Artifact artifact);

  /**
   * Called as we visit each input of a dependency.
   * These are usually enumerated in preparation for a recursive call.
   * Recursion will proceed on this input only if this method returns true.
   *
   * @param inputFile an input file which this action depends on (many to one).
   * @param dependency the DependentAction which requires this input file.
   */
  boolean visitInput(Artifact inputFile, DependentAction dependency);

  /**
   * Called as we visit the outputs of a dependency.
   * @param outputFiles the outputs of the action.
   * @param action the dependent action.
   */
  void visitOutputs(Collection<Artifact> outputFiles, DependentAction action);
}
