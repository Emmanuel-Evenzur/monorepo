#if (!$singlePage)
---
layout: documentation
title: Make Variables
---
#end
#if (!$singlePage)
#parse("com/google/devtools/build/docgen/templates/be/header.vm")
#end

<!-- ============================================
                      variables
     ============================================
-->
<h1 id="make-variables">"Make" Variables</h1>

#if (!$singlePage)
<div class="toc">
  <ul>
    <li><a href="#use">Use</a></li>
    <li><a href="#predefined_variables">Predefined variables</a></li>
    <li><a href="#predefined_genrule_variables">Predefined genrule variables</a></li>
    <li><a href="#custom_variables">Custom variables</a></li>
    <li><a href="#location">"$(location)" substitution</a></li>
  </ul>
</div>
#end
<p>
  "Make" variables are a special class of expandable string variables available
  to attributes marked as <i>"Subject to 'Make variable' substitution"</i>.
</p>

<p>
  They can be used, for example, to inject specific toolchain paths into
  user-constructed build actions.
</p>

<p>
  Bazel provides both <i>predefined</i> variables, which are available to all
  rules, and <i>custom</i> variables, which are defined in rules and only
  available to other rules that depend on them.
</p>

<p>
  The reason for the term "Make" is historical: the syntax and semantics of
  these variables were originally intended to match <a
  href="https://www.gnu.org/software/make/manual/html_node/Using-Variables.html">GNU
  Make</a>.
</p>

<h2 id="use">Use</h2>

<p>
  Attributes marked as <i>"Subject to 'Make variable' substitution"</i> can
  reference the "Make" variable <code>FOO</code> as follows:
</p>

<p>
<code>my_attr = "prefix $(FOO) suffix"</code>
</p>

<p>
  In other words, any substring that matches <code>$(FOO)</code> gets expanded
  to <code>FOO</code>'s value. If that value is <code>"bar"</code>, the final
  string becomes:
</p>

<p>
<code>my_attr = "prefix bar suffix"</code>
</p>

<p>
  Parentheses may be omitted for single-character variable names. So both
  <code>$(A)</code> and <code>&#36;A</code> are valid references.
</p>

<p>
  If <code>FOO</code> doesn't correspond to a variable known to the consuming
  rule, Bazel fails with an error.
</p>

<p>
  To treat <code>$(FOO)</code> as a string literal that shouldn't be
  expanded, use double dollar signs: <code>$$(FOO)</code>.
</p>

<h2 id="predefined_variables">Predefined variables</h2>

<p>
  Predefined "Make" variables can be referenced in any attribute marked as
  <i>"Subject to 'Make variable' substitution"</i> under any rule.
</p>

<p>
  To see the list of these variables and their values for a given set of build
  flags, run
</p>

<p><code>bazel info --show_make_env [build options]</code></p>

<p>
  and look at the top lines in the output with capital letters.
</p>

<p><strong>C++ toolchain path variables</strong></p>
<p>
  The following will eventually be converted to <a
  href="#custom_variables">custom variables</a> defined in C++ toolchain
  rules. For the time being they're globally available to all rules.
</p>

<p>
  The built-in C++ rules are much more sophisticated than "run the compiler on
  it". In order to support compilation modes as diverse as *SAN, ThinLTO,
  with/without modules, and carefully optimized binaries at the same time as
  fast running tests on multiple platforms, the built-in rules go to great
  lengths to ensure the correct inputs, outputs, and command-line flags are set
  on each of potentially multiple internally generated actions.
</p>

<p>
  These variables are a fallback mechanism to be used by language experts in
  rare cases. If you are tempted to use them, please <a
  href="https://bazel.build/support.html">contact the Bazel devs</a> first.
</p>

<ul><!--  keep alphabetically sorted  -->
  <li class="harmful"> <code>CC</code>: The C and C++ compiler command.
    <p>
      It is strongly recommended to always use <code>CC_FLAGS</code> in
      combination with <code>CC</code>. Fail to do so at your own risk.
    </p>
  </li>
  <li class="harmful"> <code>C_COMPILER</code>:
    The C/C++ compiler identifier, e.g. "llvm".
  </li>

  <li> <code>STRIP</code>: The strip command from the same suite as the C/C++
    compiler.</li>
  <li> <code>AR</code>: The "ar" command from crosstool. </li>
  <li> <code>NM</code>: The "nm" command from crosstool. </li>
  <li> <code>OBJCOPY</code>: The objcopy command from the same suite as the C/C++
    compiler. </li>
</ul>

<p><strong>Toolchain option variables</strong></p>

<ul><!--  keep alphabetically sorted  -->
  <li class="harmful"><code>CC_FLAGS</code>: A minimal set of flags for the C/C++
    compiler to be usable by genrules. In particular, it contains flags to select
    the correct architecture if <code>CC</code> supports multiple architectures.
  </li>
  <li><code>COMPILATION_MODE</code>:
    "fastbuild", "dbg", or "opt". (<a
  href="https://docs.bazel.build/versions/master/user-manual.html#flag--compilation_mode">More
  details</a>)
  </li>
</ul>

<p><strong>Path variables</strong></p>

<ul><!--  keep alphabetically sorted  -->
  <li><code>BINDIR</code>: The base of the generated binary tree for the target
    architecture.

    <p>
      Note that a different tree may be used for programs that run during the
      build on the host architecture, to support cross-compiling.  If you want
      to run a tool from within a genrule, the recommended way of specifying the
      path to the tool is to use <code>$(location <i>toolname</i>)</code>, where
      <i>toolname</i> must be listed in the <code>tools</code> attribute for the
      genrule.
    </p>
  </li>
      
  <li><code>GENDIR</code>:
    The base of the generated code tree for the target architecture.
  </li>
</ul>

<p><strong>Machine architecture variables</strong></p>

<ul><!--  keep alphabetically sorted  -->
  <li><code>ABI</code>:
    The C++ ABI version. </li>

  <li> <code>TARGET_CPU</code>: The target architecture's cpu, e.g. "k8". </li>
</ul>

<h2 id="predefined_genrule_variables">Predefined genrule variables</h2>
<p>
  The following are specially available to <code>genrule</code>'s
  <code><a href="$expander.expandRef("genrule.cmd")">cmd</a></code> attribute and are
  generally important toward making that attribute work.
</p>

<ul><!--  keep alphabetically sorted  -->
  <li><code>OUTS</code>: The <code><a href="$expander.expandRef("genrule.outs")">outs</a></code> list. If you have only one output
    file, you can also use <code>$@</code>.</li>
  <li><code>SRCS</code>: The <code>srcs</code> list (or more
    precisely, the pathnames of the files corresponding to
    labels in the <code>srcs</code> list).  If you have only one
    source file, you can also use <code>$&lt;</code>.</li>
  <li><code>&lt;</code>: <code>srcs</code>, if it is a single file.</li>
  <li><code>@</code>: <code>outs</code>, if it is a single file.</li>
  <li><code>@D</code>: The output directory.  If there is only
    one filename in <code>outs</code>, this expands to the
    directory containing that file.  If there are multiple
    filenames, this variable instead expands to the package's root
    directory in the <code>genfiles</code> tree, <i>even if all
    the generated files belong to the same subdirectory</i>!
    <!-- (as a consequence of the "middleman" implementation) -->
    If the genrule needs to generate temporary intermediate files
    (perhaps as a result of using some other tool like a compiler)
    then it should attempt to write the temporary files to
    <code>@D</code> (although <code>/tmp</code> will also be
    writable), and to remove any such generated temporary files.
    Especially, avoid writing to directories containing inputs -
    they may be on read-only filesystems, and even if they aren't,
    doing so would trash the source tree.</li>
</ul>


<h2 id="custom_variables">Custom variables</h2>

<p><strong>Java toolchain path variables</strong></p>

<p>
  The following variables are defined in Java toolchain rules and available to
  any rule that sets <code>toolchains =
  ["@bazel_tools//tools/jdk:current_java_runtime"]</code> (or
  <code>"@bazel_tools//tools/jdk:currentHost_java_runtime"</code> for the host
  toolchain version).
</p>

<ul><!--  keep alphabetically sorted  -->
  <li class="harmful"> <code>JAVA</code>: The "java" command (a Java virtual
    machine). Avoid this, and use a <code>java_binary</code> rule instead where
    possible. May be a relative path. If you must change
    directories before invoking <code>java</code>, you need to capture the
    working directory before changing it.
  </li>

  <li class="harmful"><code>JAVABASE</code>: The base directory containing the
    Java utilities. May be a relative path. It will have a "bin"
    subdirectory.
    
    <p>
      For Java, most of the tools in the JDK should not be used as-is. The
      built-in Java rules use much more sophisticated approaches to Java
      compilation and packaging than the upstream tools can express, such as
      interface Jars, header interface Jars, and highly
      optimized Jar packaging and merging implementations.
    </p>
  </li>

</ul>


<h2 id="location">"$(location)" substitution</h2>

<p>
  In attributes that support it, all occurrences of
  <code>$(location <i>label</i>)</code> are replaced by the path to the
  file denoted by <i>label</i>. Use <code>location</code> if the <i>label</i>
  outputs exactly one filename. This allows bazel to perform a check and give
  an error if no or more than one files are represented by the given label; a
  label referring to a source file always represents a single file, but a label
  referring to a rule refers to all output files of that rule. Otherwise use
  <code>$(location<b>s</b> <i>label</i>)</code>; bazel will then raise an error
  if no files are generated. In both cases, if the label is malformed then an
  error is raised.
</p>
<p>
  The <i>label</i> needs not be in canonical form:
  <code>foo</code>, <code>:foo</code> and <code>//somepkg:foo</code> are
  all fine. It may also be the name of an output file from the
  <code>outs</code> attribute.
</p>
<p>
  The expanded paths are relative to the runfiles directory of the
  <code>*_test</code> or <code>*_binary</code> rule.
</p>


<p>To see the list of all common "Make" variables and their values,
  run <code>bazel info --show_make_env</code>.
</p>

<p>Build rules can introduce additional rule specific variables. One example is
  the <a href="$expander.expandRef("genrule.cmd")"><code>cmd</code> attribute of a genrule</a>.
</p>




#if (!$singlePage)
#parse("com/google/devtools/build/docgen/templates/be/footer.vm")
#end
