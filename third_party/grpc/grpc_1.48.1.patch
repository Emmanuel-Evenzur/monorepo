diff --git a/bazel/grpc_build_system.bzl b/bazel/grpc_build_system.bzl
index 7bb6b8bdb9..7644107b70 100644
--- a/bazel/grpc_build_system.bzl
+++ b/bazel/grpc_build_system.bzl
@@ -30,8 +30,6 @@
 load("//bazel:cc_grpc_library.bzl", "cc_grpc_library")
 load("//bazel:copts.bzl", "GRPC_DEFAULT_COPTS")
 load("@upb//bazel:upb_proto_library.bzl", "upb_proto_library", "upb_proto_reflection_library")
-load("@build_bazel_rules_apple//apple:ios.bzl", "ios_unit_test")
-load("@build_bazel_rules_apple//apple/testing/default_runner:ios_test_runner.bzl", "ios_test_runner")

 # The set of pollers to test against if a test exercises polling
 POLLERS = ["epoll1", "poll"]
@@ -60,8 +60,7 @@
             ret.append("//third_party/xxhash")
         elif dep == "cares":
             ret += select({
-                "//:grpc_no_ares": [],
-                "//conditions:default": ["//external:cares"],
+                "//conditions:default": [],
             })
         elif dep == "cronet_c_for_grpc":
             ret.append("//third_party/objective_c/Cronet:cronet_c_for_grpc")
@@ -162,8 +162,7 @@
         srcs = srcs,
         defines = defines +
                   select({
-                      "//:grpc_no_ares": ["GRPC_ARES=0"],
-                      "//conditions:default": [],
+                      "//conditions:default": ["GRPC_ARES=0"],
                   }) +
                   select({
                       "//:remote_execution": ["GRPC_PORT_ISOLATED_RUNTIME=1"],
@@ -237,10 +235,6 @@
     test_lib_ios = name + "_test_lib_ios"
     ios_tags = tags + ["manual", "ios_cc_test"]
     test_runner = "ios_x86_64_sim_runner_" + name
-    ios_test_runner(
-        name = test_runner,
-        device_type = "iPhone X",
-    )
     if not any([t for t in tags if t.startswith("no_test_ios")]):
         native.objc_library(
             name = test_lib_ios,
@@ -253,15 +247,6 @@
             testonly = 1,
         )
         ios_test_deps = [":" + test_lib_ios]
-        ios_unit_test(
-            name = name + "_on_ios",
-            size = kwargs.get("size"),
-            data = kwargs.get("data"),
-            tags = ios_tags,
-            minimum_os_version = "9.0",
-            runner = test_runner,
-            deps = ios_test_deps,
-        )

 def expand_tests_for_each_poller_and_engine(name, srcs, deps, tags, args, exclude_pollers, uses_event_engine):
     """Common logic used to parameterize tests for every poller and EventEngine.
@@ -603,4 +588,4 @@
     native.config_setting(
         name = "python3",
         flag_values = {"@bazel_tools//tools/python:python_version": "PY3"},
-    )
+    )
diff --git a/bazel/grpc_deps.bzl b/bazel/grpc_deps.bzl
index 09fcad95a2..9b737e5deb 100644
--- a/bazel/grpc_deps.bzl 
+++ b/bazel/grpc_deps.bzl
@@ -82,7 +82,7 @@

     native.bind(
         name = "madler_zlib",
-        actual = "@zlib//:zlib",
+        actual = "@//third_party/zlib",
     )

     native.bind(
@@ -106,11 +106,6 @@
     )
 
     native.bind(
-        name = "cares",
-        actual = "@com_github_cares_cares//:ares",
-    )
-
-    native.bind(
         name = "gtest",
         actual = "@com_google_googletest//:gtest",
     )
@@ -276,18 +271,6 @@
             urls = [
                 "https://storage.googleapis.com/grpc-bazel-mirror/github.com/google/re2/archive/8e08f47b11b413302749c0d8b17a1c94777495d5.tar.gz",
                 "https://github.com/google/re2/archive/8e08f47b11b413302749c0d8b17a1c94777495d5.tar.gz",
-            ],
-        )
-
-    if "com_github_cares_cares" not in native.existing_rules():
-        http_archive(
-            name = "com_github_cares_cares",
-            build_file = "@com_github_grpc_grpc//third_party:cares/cares.BUILD",
-            sha256 = "ec76c5e79db59762776bece58b69507d095856c37b81fd35bfb0958e74b61d93",
-            strip_prefix = "c-ares-6654436a307a5a686b008c1d4c93b0085da6e6d8",
-            urls = [
-                "https://storage.googleapis.com/grpc-bazel-mirror/github.com/c-ares/c-ares/archive/6654436a307a5a686b008c1d4c93b0085da6e6d8.tar.gz",
-                "https://github.com/c-ares/c-ares/archive/6654436a307a5a686b008c1d4c93b0085da6e6d8.tar.gz",
             ],
         )
 
diff --git a/bazel/grpc_extra_deps.bzl b/bazel/grpc_extra_deps.bzl
index 09fcad95a2..9b737e5deb 100644
--- a/bazel/grpc_extra_deps.bzl
+++ b/bazel/grpc_extra_deps.bzl
@@ -13,14 +13,9 @@
 # limitations under the License.
 """Loads the dependencies necessary for the external repositories defined in grpc_deps.bzl."""

-load("@bazel_gazelle//:deps.bzl", "gazelle_dependencies")
-load("@build_bazel_apple_support//lib:repositories.bzl", "apple_support_dependencies")
-load("@build_bazel_rules_apple//apple:repositories.bzl", "apple_rules_dependencies")
 load("@com_envoyproxy_protoc_gen_validate//:dependencies.bzl", "go_third_party")
 load("@com_google_googleapis//:repository_rules.bzl", "switched_rules_by_language")
 load("@com_google_protobuf//:protobuf_deps.bzl", "protobuf_deps")
-load("@envoy_api//bazel:repositories.bzl", "api_dependencies")
-load("@io_bazel_rules_go//go:deps.bzl", "go_register_toolchains", "go_rules_dependencies")
 load("@upb//bazel:workspace_deps.bzl", "upb_deps")

 def grpc_extra_deps(ignore_version_differences = False):
@@ -50,20 +45,6 @@

     upb_deps()

-    api_dependencies()
-
-    go_rules_dependencies()
-    go_register_toolchains(version = "1.18")
-    gazelle_dependencies()
-
-    # Pull-in the go 3rd party dependencies for protoc_gen_validate, which is
-    # needed for building C++ xDS protos
-    go_third_party()
-
-    apple_rules_dependencies(ignore_version_differences = ignore_version_differences)
-
-    apple_support_dependencies()
-
     # Initialize Google APIs with only C++ and Python targets
     switched_rules_by_language(
         name = "com_google_googleapis_imports",
