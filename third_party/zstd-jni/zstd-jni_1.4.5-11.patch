diff --git a/src/main/java/com/github/luben/zstd/util/Native.java b/src/main/java/com/github/luben/zstd/util/Native.java
--- a/src/main/java/com/github/luben/zstd/util/Native.java
+++ b/src/main/java/com/github/luben/zstd/util/Native.java
@@ -1,19 +1,13 @@
 package com.github.luben.zstd.util;

-import java.io.File;
-import java.io.FileOutputStream;
+import com.google.devtools.build.runfiles.Runfiles;
 import java.io.IOException;
-import java.io.InputStream;
 import java.lang.UnsatisfiedLinkError;

 public enum Native {
     ;

     private static final String libnameShort = "zstd-jni";
-    private static final String libname = "lib" + libnameShort;
-    private static final String errorMsg = "Unsupported OS/arch, cannot find " +
-        resourceName() + " or load " + libnameShort + " from system libraries. Please " +
-        "try building from source the jar or providing " + libname + " in your system.";

     private static String osName() {
         String os = System.getProperty("os.name").toLowerCase().replace(' ', '_');
@@ -26,8 +20,12 @@ public enum Native {
         }
     }

-    private static String osArch() {
-        return System.getProperty("os.arch");
+    private static String libPrefix() {
+        if (osName().contains("win")) {
+            return "";
+        } else {
+            return "lib";
+        }
     }

     private static String libExtension() {
@@ -40,8 +38,8 @@ public enum Native {
         }
     }

-    private static String resourceName() {
-        return "/" + osName() + "/" + osArch() + "/" + libname + "." + libExtension();
+    private static String libraryFilename() {
+        return libPrefix() + libnameShort + "." + libExtension();
     }

     private static boolean loaded = false;
@@ -51,99 +49,34 @@ public enum Native {
     }

     public static synchronized void load() {
-        load(null);
-    }
-
-    public static synchronized void load(final File tempFolder) {
         if (loaded) {
             return;
         }
-        String resourceName = resourceName();
-
-        // try to load the shared library directly from the JAR
         try {
-            Class.forName("org.osgi.framework.BundleEvent"); // Simple OSGI env. check
-            System.loadLibrary(libname);
-            loaded = true;
-            return;
-        } catch (Exception e) {
-            // ignore and try other methods
+            System.loadLibrary(libnameShort);
+        } catch (UnsatisfiedLinkError e) {
+            // Try to load from runfiles, esp. for Windows.
+            loadFromRunfiles();
         }
+        loaded = true;
+    }

-        InputStream is = Native.class.getResourceAsStream(resourceName);
-        if (is == null) {
-            // fall-back to loading the zstd-jni from the system library path.
-            // It also cover loading on Android.
-            try {
-                System.loadLibrary(libnameShort);
-                loaded = true;
-                return;
-            } catch (UnsatisfiedLinkError e) {
-                UnsatisfiedLinkError err = new UnsatisfiedLinkError(e.getMessage() + "\n" + errorMsg);
-                err.setStackTrace(e.getStackTrace());
-                throw err;
-            }
-        }
-        File tempLib = null;
-        FileOutputStream out = null;
+    private static synchronized void loadFromRunfiles() {
+        Runfiles runfiles = null;
         try {
-            tempLib = File.createTempFile(libname, "." + libExtension(), tempFolder);
-            // try to delete on exit, does not work on Windows
-            tempLib.deleteOnExit();
-            // copy to tempLib
-            out = new FileOutputStream(tempLib);
-            byte[] buf = new byte[4096];
-            while (true) {
-                int read = is.read(buf);
-                if (read == -1) {
-                    break;
-                }
-                out.write(buf, 0, read);
-            }
-            try {
-                out.flush();
-                out.close();
-                out = null;
-            } catch (IOException e) {
-                // ignore
-            }
-            try {
-                System.load(tempLib.getAbsolutePath());
-            } catch (UnsatisfiedLinkError e) {
-                // fall-back to loading the zstd-jni from the system library path
-                try {
-                    System.loadLibrary(libnameShort);
-                } catch (UnsatisfiedLinkError e1) {
-                    // display error in case problem with loading from temp folder
-                    // and from system library path - concatenate both messages
-                    UnsatisfiedLinkError err = new UnsatisfiedLinkError(
-                            e.getMessage() + "\n" +
-                            e1.getMessage() + "\n"+
-                            errorMsg);
-                    err.setStackTrace(e1.getStackTrace());
-                    throw err;
-                }
-            }
-            loaded = true;
+            runfiles = Runfiles.create();
         } catch (IOException e) {
-            // IO errors in extacting and writing the shared object in the temp dir
-            ExceptionInInitializerError err = new ExceptionInInitializerError(
-                    "Cannot unpack " + libname + ": " + e.getMessage());
-            err.setStackTrace(e.getStackTrace());
-            throw err;
+            throw new RuntimeException("Unable to locate runfiles after failing to load " +
+                                       libnameShort + " from system. Giving up.", e);
         }
-        finally {
-            try {
-                is.close();
-                if (out != null) {
-                    out.close();
-                }
-                if (tempLib != null && tempLib.exists()) {
-                    tempLib.delete();
-                }
-            } catch (IOException e) {
-                // ignore
-            }
+        String rloc = runfiles.rlocation("com_github_luben_zstd_jni/" + libraryFilename());
+        if (rloc == null) {
+            throw new RuntimeException("Unable to find JNI library in runfiles: " + rloc);
+        }
+        try {
+            System.load(rloc);
+        } catch (UnsatisfiedLinkError e) {
+            throw new RuntimeException("Unable to load JNI library from runfiles: " + rloc, e);
         }
     }
 }
