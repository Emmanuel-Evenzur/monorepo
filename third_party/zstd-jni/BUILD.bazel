load("@rules_java//java:defs.bzl", "java_library")

package(default_visibility = ["//visibility:private"])

licenses(["notice"])  # BSD License

filegroup(
    name = "srcs",
    srcs = glob(["**"]),
    visibility = ["//third_party:__pkg__"],
)

cc_library(
    name = "jni",
    hdrs = [
        "jni/jni.h",
        "jni/jni_md.h",
    ],
    includes = ["jni"],
)

cc_binary(
    name = "libzstd-jni.so",
    srcs = glob(
        [
            "src/main/native/**/*.c",
            "src/main/native/**/*.h",
        ],
    ),
    includes = [
        "src/main/native",
        "src/main/native/common",
        "src/main/native/compress",
        "src/main/native/decompress",
        "src/main/native/dictBuilder",
        "src/main/native/legacy",
    ],
    linkshared = 1,
    local_defines = [
        "ZSTD_MULTITHREAD=1",
        "ZSTD_LEGACY_SUPPORT=4",
    ],
    deps = [
        ":jni",
    ],
)

# TODO(bazel-team): Come up with a way to support platform-specific dynamic
# library extensions.  This is issue #914.
genrule(
    name = "mac-compat",
    srcs = [":libzstd-jni.so"],
    outs = ["libzstd-jni.dylib"],
    cmd = "cp $< $@",
    output_to_bindir = 1,
)

java_library(
    name = "zstd-jni",
    srcs = glob(
        [
            "src/main/java/**/*.java",
        ],
    ),
    data = select({
        "//src/conditions:darwin": ["//third_party/zstd-jni:libzstd-jni.dylib"],
        "//src/conditions:darwin_x86_64": ["//third_party/zstd-jni:libzstd-jni.dylib"],
        "//src/conditions:windows": [],
        "//conditions:default": ["//third_party/zstd-jni:libzstd-jni.so"],
    }),
    visibility = ["//visibility:public"],
    deps = ["@bazel_tools//tools/java/runfiles"],
)
