name: Check PR Approvals

on:
  schedule:
    - cron: "*/10 * * * *" # Run daily at midnight

jobs:
  check-pr-approvals:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Get PRs with 'awaiting-review' label
        id: get-prs
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            import { Octokit } from "@octokit/rest";
            const octokit = new Octokit({
              auth: context.token
            });
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const label = "awaiting-review";
            const query = `repo:${owner}/${repo} is:pr label:${label}`;
            const result = await octokit.rest.pulls.list({
              query: query,
              state: "open"
            });
            const prs = result.data;
            return prs;
      - name: Check PR Approvals
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prs = JSON.parse('${{ steps.get-prs.outputs.prs }}');
            const octokit = new Octokit({
              auth: context.token
            });
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const commentBody = "Since we can see that this PR has been approved before 5 days, Please let us know whether gTech team should proceed with importing it internally. Thanks!";
            const fiveDaysAgo = new Date();
            fiveDaysAgo.setDate(fiveDaysAgo.getDate() - 5);
            for (const pr of prs) {
              const reviews = await octokit.rest.pulls.listReviews({
                owner: owner,
                repo: repo,
                pull_number: pr.number
              });
              const approvedReview = reviews.data.find(review => review.state === "APPROVED");
              if (approvedReview && approvedReview.created_at < fiveDaysAgo) {
                const comments = await octokit.rest.issues.listComments({
                  owner: owner,
                  repo: repo,
                  issue_number: pr.number
                });
                const existingComment = comments.data.find(comment => comment.body === commentBody);
                if (!existingComment) {
                  await octokit.rest.issues.createComment({
                    owner: owner,
                    repo: repo,
                    issue_number: pr.number,
                    body: commentBody
                  });
                }
              }
            }
